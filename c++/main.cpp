#include <iostream>
#include <vector>
#include <string>
#include <codecvt>
#include <locale>
#include <chrono>
#include <thread>

#ifdef _WIN32
 #include <windows.h>
#endif

#define anim_speed 250/2

int INIT_HONK()
{
#ifdef _WIN32
SetConsoleOutputCP(CP_UTF8);
SetConsoleCP(CP_UTF8);
HANDLE hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
if (hConsole == INVALID_HANDLE_VALUE){return -1;}
DWORD dwMode;
if (!GetConsoleMode(hConsole, &dwMode)){return -1;}
dwMode |= ENABLE_VIRTUAL_TERMINAL_PROCESSING;
if (!SetConsoleMode(hConsole, dwMode)){return -1;}
#endif
return 0;

}

void sleep_milis(int milliseconds) {
std::this_thread::sleep_for(std::chrono::milliseconds(milliseconds));
}

void draw_frame(const std::vector<std::vector<uint8_t>>&frame,const std::vector<std::vector<uint8_t>>colors)
{
std::string output;

for (size_t i=0;i<frame.size();i+=2)
{
  for (size_t n=0;n<frame[i].size();n++)
  {
   output+="\033[38;2;"+
           std::to_string((int)colors[frame[i][n]][0])+";"+
           std::to_string((int)colors[frame[i][n]][1])+";"+
           std::to_string((int)colors[frame[i][n]][2])+"m"+
           "\033[48;2;"+
           std::to_string((int)colors[frame[i+1][n]][0])+";"+
           std::to_string((int)colors[frame[i+1][n]][1])+";"+
           std::to_string((int)colors[frame[i+1][n]][2])+"m"           
           +"â–€";
  
  }  
  output+="\033[0m\n";
}

std::cout<<output<<"\033[H";
}

const std::vector<std::vector<uint8_t>>colors=
{
{223,224,232},
{163,167,194},
{171,81,48},
{255,137,51},
{20,24,46},
{207,117,43},
{128,128,128}
};

const std::vector<std::vector<std::vector<uint8_t>>>frames=
{
{
{6,6,6,6,6,6,6,6,6,6,6,0,0,6,6,6,},
{6,6,6,6,6,6,6,6,6,6,0,4,0,4,6,6,},
{6,6,6,6,6,6,6,6,6,6,0,3,3,3,3,3,},
{0,6,6,6,6,6,6,6,6,6,0,3,3,3,3,3,},
{0,0,6,6,6,6,6,6,6,6,0,0,0,6,6,6,},
{0,0,0,6,6,6,6,6,6,0,0,0,0,6,6,6,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,},
{0,0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,},
{0,0,0,1,1,0,0,0,1,1,0,0,0,6,6,6,},
{1,1,0,0,0,1,1,1,0,0,0,0,0,6,6,6,},
{6,1,1,1,0,0,0,0,0,0,0,1,1,6,6,6,},
{6,6,6,1,1,1,1,1,1,1,1,1,6,6,6,6,},
{6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,2,2,6,6,6,6,6,6,2,2,6,6,6,},
},

{
{6,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,},
{6,6,6,6,6,6,6,6,0,0,0,4,6,6,6,6,},
{0,0,6,6,6,6,6,6,0,4,0,0,6,6,6,6,},
{0,0,6,6,6,6,6,6,0,0,0,3,5,6,6,6,},
{0,0,0,6,6,6,6,6,0,0,5,3,3,3,6,6,},
{0,0,0,0,0,0,6,6,0,0,3,3,3,3,3,6,},
{0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,6,},
{0,0,0,0,0,0,0,0,0,0,0,6,3,3,6,6,},
{1,1,0,0,0,0,0,0,0,0,1,6,6,6,6,6,},
{6,1,1,0,0,0,0,0,0,1,1,6,6,6,6,6,},
{6,6,1,1,1,1,1,1,1,1,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,2,6,6,6,2,2,6,6,6,6,6,6,},
},

{
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,4,0,0,4,6,6,6,6,6,6,},
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,5,3,3,5,6,6,6,6,6,6,},
{6,6,6,6,6,6,3,3,3,3,6,6,6,6,6,6,},
{6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,},
{6,6,6,0,0,0,0,0,0,0,0,0,0,6,6,6,},
{6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,},
{6,6,0,0,0,0,0,0,0,0,0,0,0,0,6,6,},
{6,6,1,1,0,0,0,0,0,0,0,0,1,1,6,6,},
{6,6,6,1,1,1,0,0,0,0,1,1,1,6,6,6,},
{6,6,6,6,1,1,1,1,1,1,1,1,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
},

{
{6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,},
{6,6,6,6,4,0,0,0,6,6,6,6,6,6,6,6,},
{6,6,6,6,0,0,4,0,6,6,6,6,6,6,0,0,},
{6,6,6,5,3,0,0,0,6,6,6,6,6,6,0,0,},
{6,6,3,3,3,5,0,0,6,6,6,6,6,0,0,0,},
{6,3,3,3,3,3,0,0,6,6,0,0,0,0,0,0,},
{6,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,},
{6,6,3,3,6,0,0,0,0,0,0,0,0,0,0,1,},
{6,6,6,6,6,0,0,0,0,0,0,0,0,0,1,1,},
{6,6,6,6,6,1,1,0,0,0,0,0,0,1,1,6,},
{6,6,6,6,6,6,1,1,1,1,1,1,1,1,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,2,2,6,6,6,2,2,6,6,6,},
},

{
{6,6,6,0,0,6,6,6,6,6,6,6,6,6,6,6,},
{6,6,4,0,4,0,6,6,6,6,6,6,6,6,6,6,},
{3,3,3,3,3,0,6,6,6,6,6,6,6,6,6,6,},
{3,3,3,3,3,0,6,6,6,6,6,6,6,6,6,0,},
{6,6,6,0,0,0,6,6,6,6,6,6,6,6,0,0,},
{6,6,6,0,0,0,0,6,6,6,6,6,6,0,0,0,},
{6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,0,},
{6,6,6,0,0,0,1,1,0,0,0,1,1,0,0,0,},
{6,6,6,0,0,0,0,0,1,1,1,0,0,0,1,1,},
{6,6,6,1,1,0,0,0,0,0,0,0,1,1,1,6,},
{6,6,6,6,1,1,1,1,1,1,1,1,1,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,6,2,6,6,6,},
{6,6,6,2,2,6,6,6,6,6,6,2,2,6,6,6,},
},

{
{6,3,3,3,0,0,6,6,6,6,6,6,6,6,6,6,},
{6,3,3,3,0,0,0,6,6,6,6,6,6,6,6,6,},
{6,6,3,3,0,0,0,6,6,6,6,6,6,6,6,6,},
{6,6,6,3,0,0,0,6,6,6,6,6,6,6,6,6,},
{6,6,6,6,0,0,0,6,6,6,6,6,6,6,6,6,},
{6,6,6,6,0,0,0,6,6,6,6,6,6,6,0,0,},
{6,6,6,6,0,0,0,0,0,0,0,6,0,0,0,0,},
{6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,},
{6,6,6,6,0,0,0,0,0,0,0,0,0,0,0,0,},
{6,6,6,6,1,0,0,0,0,0,0,0,0,0,0,6,},
{6,6,6,6,1,1,0,0,0,0,0,0,0,1,1,6,},
{6,6,6,6,6,1,1,1,1,1,1,1,1,1,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,6,2,6,6,6,6,2,6,6,6,},
{6,6,6,6,6,6,2,2,6,6,6,2,2,6,6,6,},
},

{
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,6,6,0,0,0,0,6,6,6,6,6,6,},
{6,6,6,6,0,0,0,0,0,0,0,0,6,6,6,6,},
{6,6,6,0,0,0,0,1,1,0,0,0,0,6,6,6,},
{6,6,0,0,0,0,1,0,0,1,0,0,0,0,6,6,},
{6,6,0,0,0,0,1,0,0,1,0,0,0,0,6,6,},
{6,6,1,1,0,1,0,0,0,0,1,0,1,1,6,6,},
{6,6,6,1,1,1,0,0,0,0,1,1,1,6,6,6,},
{6,6,6,6,1,1,1,1,1,1,1,1,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
{6,6,6,6,2,6,6,6,6,6,6,2,6,6,6,6,},
},

{
{6,6,6,6,6,6,6,6,6,6,0,0,3,3,3,6,},
{6,6,6,6,6,6,6,6,6,0,0,0,3,3,3,6,},
{6,6,6,6,6,6,6,6,6,0,0,0,3,3,6,6,},
{0,6,6,6,6,6,6,6,6,0,0,0,3,6,6,6,},
{0,6,6,6,6,6,6,6,6,0,0,0,6,6,6,6,},
{0,0,6,6,6,6,6,6,6,0,0,0,6,6,6,6,},
{0,0,0,6,6,0,0,0,0,0,0,0,6,6,6,6,},
{0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,},
{0,0,0,0,0,0,0,0,0,0,0,0,6,6,6,6,},
{6,0,0,0,0,0,0,0,0,0,0,1,6,6,6,6,},
{6,1,1,0,0,0,0,0,0,0,1,1,6,6,6,6,},
{6,6,1,1,1,1,1,1,1,1,1,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,6,6,6,6,2,6,6,6,6,6,6,6,},
{6,6,6,2,2,6,6,6,2,2,6,6,6,6,6,6,},
}

};

int main()
{
if(INIT_HONK()!=0){exit(-69);}

/*clear da fucking screen*/
std::cout<<"\033[2J\033[H\033[?25l";

while (1)
{
draw_frame(frames[0],colors);
sleep_milis(anim_speed);
draw_frame(frames[1],colors);
sleep_milis(anim_speed);
draw_frame(frames[2],colors);
sleep_milis(anim_speed);
draw_frame(frames[3],colors);
sleep_milis(anim_speed);
draw_frame(frames[4],colors);
sleep_milis(anim_speed);
draw_frame(frames[5],colors);
sleep_milis(anim_speed);
draw_frame(frames[6],colors);
sleep_milis(anim_speed);
draw_frame(frames[7],colors);
sleep_milis(anim_speed);

}

return 69;
}